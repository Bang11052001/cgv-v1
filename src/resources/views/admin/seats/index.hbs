<h2>Phòng </h2>
<table class="table table-bordered text-center">
  <thead>
    <tr>
      <th scope="col">STT</th>
      <th scope="col">Name</th>
      <th scope="col">Seat</th>
      <th scope="col">Status</th>
      <th scope="col">Option</th>
    </tr>
  </thead>
  <tbody>
    {{#with room}}
    <tr>
      <td>1</td>
      <td>{{name}}</td>
      <td>{{seat}}</td>
      <td>{{statusHandle status}}</td>
      <td><a href="/admin/rooms/update?id={{_id}}">Sửa</a>/<a href="/admin/rooms/delete?id={{_id}}">Xóa</a></td>
    </tr>
    {{/with}}
  </tbody>
</table>

<h2>Seats</h2>
<form id="form-seats-create" method ="POST" action ="/admin/seats?room_id={{room._id}}">
  <label for="exampleInputEmail1" class="form-label">Số Cột</label>
  <input class="seats-create-column" type="number" min ="1" name ="column" value ="{{room.column}}" required>
  <label for="exampleInputEmail1" class="form-label" >Số hàng</label>
  <input class="seats-create-row" type="number" min ="1" name ="row" value ="{{room.row}}" required>
  <div class ="btn btn-primary mt-2" onclick ="handleSetRoomSeats()">click</div>
  
  <label for="exampleInputEmail1" class="form-label">Giá ghế thường</label>
  <input class="seats-create-column" type="number" min ="1" name ="brandNormalPrice" value ="100000" required><br>
  <label for="exampleInputEmail1" class="form-label" >Giá ghế vip</label>
  <input class="seats-create-row" type="number" min ="1" name ="brandVipPrice" value ="105000" required><br>
  <label for="exampleInputEmail1" class="form-label" >Giá ghế sweetbox</label>
  <input class="seats-create-row" type="number" min ="1" name ="brandSweetboxPrice" value ="125000" required><br>
  <br>
  <div class ="btn btn-primary  mt-2" onclick="handleAddColumn()">THêm cột</div>
  <div class ="btn btn-primary mt-2" onclick="handleAddRow()">THêm hàng</div><br>
  <div class="booking-content">
    <div class ="d-flex">
      <div class ="table-seats-head d-flex">
        {{#with result.[0]}}
          <div class ="table-seats-title table-seats-head--item"></div>
            {{#each seats}}
              <div class ="table-seats-title table-seats-head--item">{{countIndex @index 1}}</div>
            {{/each}}
        {{/with}}
      </div>
      <div class ="table-seats-title" >Opt</div>
    </div>
      <div class ="table-seats-body">
        {{#each result}}
        <div class ="table-seats-item table-seats-{{brand}}-container d-flex">
          <div class ="table-seats-row d-flex">
            <div class ="table-seats-title table-seats-row-brand">{{name}}</div>
            {{#each seats}}
            {{#if name}}
              <input type="checkbox" id="{{name}}" name ="{{name}}" checked></input>
              <label class ="seat seat--{{../brand}}-active" for ="{{name}}" name ="{{name}}" onclick = "handleCreateSeat(event)">{{name}}</label>
            {{/if}}
            {{#unless name}}
              <input type="checkbox" id="{{../name}}{{index}}" name ="{{../name}}{{index}}"></input>
              <label class ="seat " for ="{{../name}}{{index}}" name ="{{../name}}{{index}}" onclick = "handleCreateSeat(event)">+</label>
            {{/unless}}
            {{/each}}
          </div>
          <div class ="table-seats-title btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalSetSeatsBrand" data-index="1" onclick ="handleSetSeatsBrand(event) ">Sửa</div>
        </div>
        {{/each}}
      </div>
  </div>
  <button type ="submit" class ="btn btn-primary">Save</button>
</form>

{{!-- modal  --}}
<div class="modal fade" id="modalSetSeatsBrand" tabindex="-1"  aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalSetSeatsBrandLabel">Modal title</h5>
        <div type="div" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></div>
      </div>
      <div class="modal-body">
        <select class="modalSetSeatsBrand-Select form-select form-select-lg mb-3" aria-label=".form-select-lg example">
          <option disabled selected value ="">-- Select Brand --</option>
          <option value="normal">Ghế thường</option>
          <option value="vip">Ghế vip</option>
          <option value="sweetbox">Ghế sweetbox</option>
        </select>
      </div>
      <div class="modal-footer">
        <div type="div" class="btn btn-secondary" data-bs-dismiss="modal">Close</div>
        <div type="div" class="btn btn-primary modalSetSeatsBrandLabelSave" data-bs-dismiss="modal">Save changes</div>
      </div>
    </div>
  </div>
</div>
<script>
let tableSeatHead = document.querySelector('.table-seats-head');
let tableSeatsHeadItems = document.querySelectorAll('.table-seats-head--item');
let tableSeatsHeadLastItem = tableSeatsHeadItems[tableSeatsHeadItems.length - 1];
let tableSeatRows = document.querySelectorAll('.table-seats-row');
let tableSeatBrand = document.querySelectorAll('.table-seats-row-brand');
let tableSeatBrandLast = tableSeatBrand[tableSeatBrand.length - 1];
let tableSeatLastRow = tableSeatRows[tableSeatRows.length -1];
let tableSeatBody = document.querySelector('.table-seats-body');
let tableSeatItems = document.querySelectorAll('.table-seats-item');
const modalSetSeatsBrand = document.querySelector('#modalSetSeatsBrand');
const modal = document.querySelector('.modal');
const modalSaveBtn = document.querySelector('.modalSetSeatsBrandLabelSave');
const modalSetSeatsBrandSelect = document.querySelector('.modalSetSeatsBrand-Select');
let columnInput = document.querySelector('.seats-create-column');
let rowInput = document.querySelector('.seats-create-row');

// Thêm cột
function handleAddColumn(){
  tableSeatHead.innerHTML += `<div class ="table-seats-title table-seats-head--item">${parseInt(tableSeatsHeadLastItem.textContent) + 1}</div>`;
  Array.from(tableSeatRows).map(tableSeatRow =>{
    var brand = tableSeatRow.querySelector('.table-seats-row-brand').textContent;
    tableSeatRow.innerHTML += `
    <label class ="seat" name ="${brand}${parseInt(tableSeatsHeadLastItem.textContent) + 1}"
    onclick = "handleCreateSeat(event)"
    for ="${brand}${parseInt(tableSeatsHeadLastItem.textContent) + 1}">
      +
    </label>
    <input type="checkbox" id="${brand}${parseInt(tableSeatsHeadLastItem.textContent) + 1}" value="${brand}${parseInt(tableSeatsHeadLastItem.textContent) + 1}" name="${brand}${parseInt(tableSeatsHeadLastItem.textContent) + 1}">
    `
  })
  tableSeatsHeadItems = document.querySelectorAll('.table-seats-head--item');
  tableSeatsHeadLastItem = tableSeatsHeadItems[tableSeatsHeadItems.length - 1];
  columnInput.setAttribute('value', tableSeatsHeadItems.length -1 )
}

// Thêm hàng
function handleAddRow(){
  var html = '';
  var brand = `<div class ="table-seats-title table-seats-row-brand">${getNextChar(tableSeatBrandLast.textContent)}</div>`;
  Array.from(tableSeatLastRow.querySelectorAll('.seat')).map((curr,index) => {
      html += `
      <label class ="seat" name = "${getNextChar(tableSeatBrandLast.textContent)}${index + 1}"
      onclick = "handleCreateSeat(event)" 
      for ="${getNextChar(tableSeatBrandLast.textContent)}${index + 1}"
      >
      +
      </label>
      <input type="checkbox" id="${getNextChar(tableSeatBrandLast.textContent)}${index + 1}" value="${getNextChar(tableSeatBrandLast.textContent)}${index + 1}" name="${getNextChar(tableSeatBrandLast.textContent)}${index + 1}">
      `;
  })
  tableSeatBody.innerHTML += `
        <div class="table-seats-item d-flex">
          <div class ="table-seats-row d-flex">
            ${brand}
            ${html}
          </div>
          <div class ="table-seats-title btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalSetSeatsBrand" data-index="1" onclick ="handleSetSeatsBrand(event) ">Sửa</div
        </div>  
        `;

  tableSeatsHeadItems = document.querySelectorAll('.table-seats-head--item');
  tableSeatsHeadLastItem = tableSeatsHeadItems[tableSeatsHeadItems.length - 1];
  tableSeatRows = document.querySelectorAll('.table-seats-row');
  tableSeatBrand = document.querySelectorAll('.table-seats-row-brand');
  tableSeatBrandLast = tableSeatBrand[tableSeatBrand.length - 1];
  tableSeatLastRow = tableSeatRows[tableSeatRows.length -1];
  tableSeatItems = document.querySelectorAll('.table-seats-item');
  rowInput.setAttribute('value',tableSeatRows.length );
}

// Xóa cột
function handleDeleteColumn(){
  tableSeatsHeadLastItem.remove();
   Array.from(tableSeatRows).map(tableSeatRow =>{
    tableSeatRow.querySelector('input:last-of-type').remove();
    tableSeatRow.querySelector('label:last-of-type').remove();
  })
  tableSeatsHeadItems = document.querySelectorAll('.table-seats-head--item');
  tableSeatsHeadLastItem = tableSeatsHeadItems[tableSeatsHeadItems.length - 1];
}

// Xóa hàng
function handleDeleteRow(){
  tableSeatItems[tableSeatItems.length -1].remove();
  tableSeatItems = document.querySelectorAll('.table-seats-item');
 
}

// Xử lý tăng chữ cái
function getNextChar(char) {
  return String.fromCharCode(char.charCodeAt(0) + 1);
}

// Xử lý tạo ghế mặc định
function handleCreateSeatDefault(){
  Array.from(tableSeatBody.querySelectorAll('input')).map(input =>{
    if(input.checked ==true){
      if(input.parentElement.parentElement.classList.contains('table-seats-normal-container')){
        input.setAttribute('value',input.getAttribute('name')+',normal');
      }
      if(input.parentElement.parentElement.classList.contains('table-seats-vip-container')){
        input.setAttribute('value',input.getAttribute('name')+',vip');
      }
      if(input.parentElement.parentElement.classList.contains('table-seats-sweetbox-container')){
        input.setAttribute('value',input.getAttribute('name')+',sweetbox');
      }
    }
  })
}
handleCreateSeatDefault();

function handleCreateSeat(event){
  handleCreateSeatlabel(event.target)
}

// Xử lý tạo ghế
function handleCreateSeatlabel(_this) {
  if(_this.parentElement.parentElement.classList.contains('table-seats-normal-container')){
      if(_this.classList.contains('seat--normal-active')){
        _this.classList.remove('seat--normal-active');
        _this.classList.remove('seat--vip-active');
        _this.classList.remove('seat--sweetbox-active');
        _this.textContent = '+';
      }
      else{
        _this.classList.add('seat--normal-active');
        _this.textContent = _this.getAttribute('name');
        Array.from(_this.parentElement.querySelectorAll('input')).map(input=>{
          if(_this.getAttribute('for') == input.id){
              input.setAttribute('value',input.getAttribute('name')+',normal');
          }
        })
      }
  }
  else if(_this.parentElement.parentElement.classList.contains('table-seats-vip-container')){
    if(_this.classList.contains('seat--vip-active')){
         _this.classList.remove('seat--normal-active');
        _this.classList.remove('seat--vip-active');
        _this.classList.remove('seat--sweetbox-active');
        _this.textContent = '+';
      }
    else{
      _this.textContent = _this.getAttribute('name');
      _this.classList.add('seat--vip-active');
      Array.from(_this.parentElement.querySelectorAll('input')).map(input=>{
          if(_this.getAttribute('for') == input.id){
            input.setAttribute('value',input.getAttribute('name')+',vip');
          }
        })
    }
  }
  else if(_this.parentElement.parentElement.classList.contains('table-seats-sweetbox-container')){
    if(_this.classList.contains('seat--sweetbox-active')){
        _this.classList.remove('seat--normal-active');
        _this.classList.remove('seat--vip-active');
        _this.classList.remove('seat--sweetbox-active');
        _this.textContent = '+';
      }
    else{
      _this.textContent = _this.getAttribute('name');
      _this.classList.add('seat--sweetbox-active');
      Array.from(_this.parentElement.querySelectorAll('input')).map(input=>{
          if(_this.getAttribute('for') == input.id){
            input.setAttribute('value',input.getAttribute('name')+',sweetbox');
          }
        })
    }
  }
  else{
    alert("bạn phải chọn hãng ghế trước!");
    Array.from(event.target.parentElement.querySelectorAll('input')).map(input=>{
      if(event.target.getAttribute('for') == input.id){
        input.checked = true;
      }
    })
  }
}

// Xử lý thay đổi nhãn những ghế đang dc chọn
function handelChangeSeatsBrand(myBrand,brand1,brand2,_this){
  Array.from(_this.parentElement.querySelectorAll('input')).map(input => {
          if(input.checked == true){
            Array.from(_this.parentElement.querySelectorAll('label')).map(label => {
              if(label.getAttribute('for') == input.getAttribute('id')){
               label.classList.add(`seat--${myBrand}-active`);
               label.classList.remove(`seat--${brand1}-active`);
               label.classList.remove(`seat--${brand2}-active`);
              }
            })
            input.setAttribute('value',input.getAttribute('name')+','+ myBrand)
          }
        });
}

// Xử lý tạo nhãn ghế
function handleSetSeatsBrand(event){
  modalSaveBtn.onclick = function() {
    switch (modalSetSeatsBrandSelect.value){
      case 'normal':
        (event.target.parentElement).classList.remove('table-seats-vip-container');
        (event.target.parentElement).classList.remove('table-seats-sweetbox-container');
        (event.target.parentElement).classList.add('table-seats-normal-container');
        console.log(event.target.parentElement.querySelectorAll('input'))
        handelChangeSeatsBrand('normal','vip','sweetbox',event.target);
        break;
      case 'vip':
        (event.target.parentElement).classList.remove('table-seats-normal-container');
        (event.target.parentElement).classList.remove('table-seats-sweetbox-container');
        (event.target.parentElement).classList.add('table-seats-vip-container');
        handelChangeSeatsBrand('vip','normal','sweetbox',event.target);
        break;
      case 'sweetbox':
        (event.target.parentElement).classList.remove('table-seats-vip-container');
        (event.target.parentElement).classList.remove('table-seats-normal-container');
        (event.target.parentElement).classList.add('table-seats-sweetbox-container');
        handelChangeSeatsBrand('sweetbox','vip','normal',event.target);
        break;
    }
  }
}

// Xử lý tạo cột và hàng ghế
function handleSetRoomSeats(){
  var rowDefault = tableSeatRows.length ;
  var columnDefault = tableSeatLastRow.querySelectorAll('.seat').length;
  var a = columnInput.value;
  var b = rowInput.value;
  for(let i=0;i<a - columnDefault;i++){
    handleAddColumn();
  }

  for(let i=0;i<b - rowDefault;i++){
    handleAddRow();
  }

  if(rowInput.value - rowDefault < 0){
    for(let i=0;i<rowDefault - rowInput.value;i++){
      handleDeleteRow();
    }
  }
  
  if(columnInput.value - columnDefault < 0){
    for(let i=0; i<columnDefault - columnInput.value;i++){
      handleDeleteColumn();
    }
  }
  tableSeatRows = document.querySelectorAll('.table-seats-row');
  tableSeatLastRow = tableSeatRows[tableSeatRows.length -1];
}
handleSetRoomSeats()


function renderSeatsDefault(){
  
}
</script>


